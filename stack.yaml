AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template for AWS Batch with Lambda integration using EC2"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
  
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all inbound traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"

  # S3 Bucket for output
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: outputbucket-604815197344-test
      VersioningConfiguration:
        Status: Enabled  # Enable versioning if needed
      LifecycleConfiguration:  # Optional: Lifecycle rules
        Rules:
          - Id: "ExpireOldVersions"
            Status: Enabled
            ExpirationInDays: 1  # Expire old versions after 1 day

  # Create the IAM Role for ECS Instances
  ECSInstanceRole:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "ecsInstanceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
  
  # Attach necessary policies to the role
  ECSInstanceRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ecsInstanceRolePolicy"
      Roles: 
        - !Ref ECSInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ecs:CreateCluster"
              - "ecs:RegisterContainerInstance"
              - "ecs:DeregisterContainerInstance"
              - "ecs:DiscoverPollEndpoint"
              - "ecs:Submit*"
              - "ecs:Poll"
              - "ecs:StartTelemetrySession"
              - "ecs:UpdateContainerInstancesState"
              - "ecs:SubmitContainerStateChange"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "ec2:DescribeInstances"
              - "ec2:DescribeTags"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:AttachNetworkInterface"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"

  # Attach the role to the ECS Instance Profile
  ECSInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref ECSInstanceRole

  # IAM Role for AWS Batch Job Execution
  BatchJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "batch.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "arn:aws:logs:*:*:*"
                
  # AWS Batch Compute Environment (EC2)
  BatchComputeEnvironment:
    Type: "AWS::Batch::ComputeEnvironment"
    Properties:
      ComputeEnvironmentName: "BatchEC2Environment"
      Type: "MANAGED"
      ComputeResources:
        Type: "EC2"
        MinvCpus: 0  # Minimum vCPUs in the compute environment
        MaxvCpus: 100  # Maximum vCPUs in the compute environment
        DesiredvCpus: 1  # Desired vCPUs in the compute environment
        InstanceRole: !GetAtt ECSInstanceProfile.Arn
        InstanceTypes:
          - "m4.large"
        Subnets:
          - !Ref MySubnet
        SecurityGroupIds:
          - !Ref MySecurityGroup
      ServiceRole: !GetAtt BatchJobRole.Arn
      State: "ENABLED"  # Ensure the compute environment is enabled

  # AWS Batch Job Queue
  BatchJobQueue:
    Type: "AWS::Batch::JobQueue"
    Properties:
      JobQueueName: "BatchJobQueue"
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
      Priority: 1
      State: "ENABLED"  # Ensure the job queue is enabled

  # AWS Batch Job Definition (EC2)
  BatchJobDefinition:
    Type: "AWS::Batch::JobDefinition"
    Properties:
      JobDefinitionName: "BatchEC2JobDefinition"
      Type: "Container"
      ContainerProperties:
        Image: "604815197344.dkr.ecr.us-east-1.amazonaws.com/604815197344/testpyimg:latest"
        ResourceRequirements:
          - Type: MEMORY
            Value: '2048'
          - Type: VCPU
            Value: '1'
        JobRoleArn: !GetAtt BatchJobRole.Arn
        ExecutionRoleArn: !GetAtt BatchJobRole.Arn
        # Command: ["python", "main.py"]

  # CloudWatch Log Group for Batch jobs
  BatchLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/aws/batch/job-log"
      RetentionInDays: 3

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "BatchAndS3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - batch:SubmitJob
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - s3:ListBucket
                Resource: "arn:aws:s3:::noaa-gfs-bdp-pds"
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::noaa-gfs-bdp-pds/*"

  # AWS Lambda Function
  BatchJobLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "BatchJobInvoker"
      Runtime: "python3.9"
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: "lambda_function.lambda_handler"
      Code:
        S3Bucket: awstests-lavkge
        S3Key: src/code.zip
      MemorySize: 128  # Allocate memory for Lambda function
      Timeout: 30  # Timeout for the Lambda function

# Outputs section to display important resource information
Outputs:
  JobQueueArn:
    Description: "ARN of the AWS Batch Job Queue"
    Value: !Ref BatchJobQueue

  JobDefinitionArn:
    Description: "ARN of the AWS Batch Job Definition"
    Value: !Ref BatchJobDefinition

  LambdaFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt BatchJobLambda.Arn